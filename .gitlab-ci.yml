workflow:
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: "$CI_COMMIT_TAG"

    - if: $CI_COMMIT_BRANCH == "dev"
      variables:
        VERSION: "$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA"

stages:
  - build
  - package
  - deploy

variables:
  CI_TOOLS_VERSION: "v1"
  POSTGRES_VERSION: "11"
  # Override to "true" to upgrade the existing PostgreSQL release (only relevant if there is one)
  UPGRADE_POSTGRES: "false"

build:
  stage: build
  image: registry.gitlab.com/comentario/comentario-ci-tools/builder:$CI_TOOLS_VERSION
  services:
    - postgres:$POSTGRES_VERSION
  artifacts:
    when: always
    name: comentario
    expire_in: 1 days  # Only keep the last batch
    paths:
      - build/
  variables:
    # We want to store downloaded packages under the project dir, so we can cache them
    GOPATH: $CI_PROJECT_DIR/.go
    # Statically link the executable so that we can run that in Alpine
    CGO_ENABLED: 0
    # Required for the DB service (Postgres) to run
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_DB: comentario_test
    # Required for the app to run
    COMENTARIO_POSTGRES: postgres://postgres:postgres@postgres/comentario_test?sslmode=disable
  cache:
    key:
      files:
        # Backend
        - go.mod
    paths:
      # Backend
      - .go/pkg/mod/
  before_script:
    # Create the required dirs
    - mkdir -p .go
    # Install Yarn
    - npm install -g yarn@1.22.19
  script:
    #-------------------------------------------------------------------------------------------------------------------
    # Build the app
    #-------------------------------------------------------------------------------------------------------------------
    # Fetch the dependencies explicitly (not exactly necessary, but it's easier to spot problems if we do)
    - go mod download

    # Make sure there are no formatting issues
    - test -z "$(go fmt ./api/)"

    # Run backend tests
    - go test -v ./api/...

    # Build the backend
    - cd api
    - CGO_ENABLED=0 go build -a -o "../build/comentario" -ldflags "-X main.version=$(git describe --tags)"

    # Build the frontend
    - cd ..
    - yarn install
    - yarn run build:prod

    # Copy static assets
    - cp -r db/ templates/ build/

package:
  stage: package
  image: docker
  services:
    - docker:dind
  dependencies:
    - build
  variables:
    IMG_TAG_CURRENT: $CI_REGISTRY_IMAGE:$VERSION
    IMG_TAG_LATEST:  $CI_REGISTRY_IMAGE:latest
  script:
    # Login to the Container Registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    # Build and push the image
    - docker build -t "$IMG_TAG_CURRENT" .
    - docker push "$IMG_TAG_CURRENT"

    # For dev, also push it as 'latest'
    - |
      if [[ $CI_COMMIT_BRANCH == "dev" ]]; then
          docker tag "$IMG_TAG_CURRENT" "$IMG_TAG_LATEST"
          docker push "$IMG_TAG_LATEST"
      fi

deploy:
  stage: deploy
  rules:
    # Only deploy dev builds, for now
    - if: $CI_COMMIT_BRANCH == "dev"
  image: alpine/k8s:1.25.6
  environment:
    name: comment-yktoo-com
  script:
    # Use the Kubernetes context from GitLab agent
    - kubectl config use-context comentario/comentario-ci-tools:ys-comentario

    # Create a PVC for PostgreSQL if there's none yet
    - if ! kubectl --namespace ys-comentario get pvc comentario-postgres-pvc; then
    -   kubectl --namespace ys-comentario create -f k8s/postgres-pvc.yaml
    - fi

    # Fetch database username/password
    - postgres_usr="$(kubectl --namespace ys-comentario get secret comentario-secrets -o jsonpath="{.data.postgresUsername}" | base64 -d)"
    - postgres_pwd="$(kubectl --namespace ys-comentario get secret comentario-secrets -o jsonpath="{.data.postgresPassword}" | base64 -d)"

    # Install PostgreSQL if it isn't installed
    - helm repo add bitnami https://charts.bitnami.com/bitnami
    - if ! helm status --namespace ys-comentario comentario-postgres; then
    -   helm install
      --namespace ys-comentario
      --set "image.repository=postgres"
      --set "image.tag=$POSTGRES_VERSION"
      --set "persistence.existingClaim=comentario-postgres-pvc"
      --set "postgresqlUsername=$postgres_usr"
      --set "postgresqlPassword=$postgres_pwd"
      --set "postgresqlDatabase=comentario"
      --wait
      comentario-postgres
      bitnami/postgresql
    # It's already installed: upgrade PostgreSQL if needed
    - elif [[ "$UPGRADE_POSTGRES" == "true" ]]; then
    -   helm upgrade
      --namespace ys-comentario
      --set "image.repository=postgres"
      --set "image.tag=$POSTGRES_VERSION"
      --set "persistence.existingClaim=comentario-postgres-pvc"
      --set "postgresqlUsername=$postgres_usr"
      --set "postgresqlPassword=$postgres_pwd"
      --set "postgresqlDatabase=comentario"
      --wait
      comentario-postgres
      bitnami/postgresql
    - fi

    # Perform chart installation/upgrade, waiting for it to complete (up to two minutes)
    - helm upgrade
      --namespace ys-comentario
      --install
      --set "clusterIssuer=letsencrypt-staging" # TODO
      --set "image.repository=$CI_REGISTRY_IMAGE"
      --set "image.tag=$VERSION"
      --set "comentario.smtpHost=mail.privateemail.com"
      --set "comentario.smtpFromAddress=noreply@yktoo.com"
      --set "ingress.host=comment.yktoo.com"
      --wait
      --timeout 2m
      comentario-yktoo-com
      helm/comentario
