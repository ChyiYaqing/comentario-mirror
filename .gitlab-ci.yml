workflow:
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: "$CI_COMMIT_TAG"

    - if: $CI_COMMIT_BRANCH == "dev"
      variables:
        VERSION: "$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA"

stages:
  - build
  - package
  - deploy

variables:
  CI_TOOLS_VERSION: "v3"
  # Namespace to deploy Kubernetes objects into
  NAMESPACE: ys-comentario

build:
  stage: build
  image: registry.gitlab.com/comentario/comentario-ci-tools/builder:$CI_TOOLS_VERSION
  artifacts:
    when: always
    name: comentario
    expire_in: 1 days  # Only keep the last batch
    paths:
      - build/
  variables:
    # We want to store downloaded packages under the project dir, so we can cache them
    GOPATH: $CI_PROJECT_DIR/.go
    # Statically link the executable so that we can run that in Alpine
    CGO_ENABLED: 0
  cache:
    key:
      files:
        # Backend
        - go.mod
        # Frontend
        - yarn.lock
    paths:
      # Backend
      - .go/pkg/mod/
      # Frontend
      - .yarn-cache/
  before_script:
    # Create the required dirs
    - mkdir -p .go
  script:
    #-------------------------------------------------------------------------------------------------------------------
    # Build the app
    #-------------------------------------------------------------------------------------------------------------------
    # Generate code
    - go generate

    # Fetch the dependencies explicitly (not exactly necessary, but it's easier to spot problems if we do)
    - go mod download

    # Make sure there are no formatting issues
    - test -z "$(go fmt ./...)"

    # Run backend tests
    - go test -v ./...

    # Build the backend
    - CGO_ENABLED=0 go build -a -v -o "./build/comentario" -ldflags "-w -s -X main.version=$(git describe --tags) -X main.date=$(date --iso-8601=seconds)"

    # Build the frontend
    - yarn install --frozen-lockfile --no-progress --cache-folder .yarn-cache
    - yarn run build:prod

    # Copy static assets
    - cp -r db/ templates/ build/

package:
  stage: package
  image: docker
  services:
    - docker:dind
  dependencies:
    - build
  variables:
    IMG_TAG_CURRENT: $CI_REGISTRY_IMAGE:$VERSION
    IMG_TAG_LATEST:  $CI_REGISTRY_IMAGE:latest
  script:
    # Login to the Container Registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    # Build and push the image
    - docker build -t "$IMG_TAG_CURRENT" .
    - docker push "$IMG_TAG_CURRENT"

    # For dev, also push it as 'latest'
    - |
      if [[ $CI_COMMIT_BRANCH == "dev" ]]; then
          docker tag "$IMG_TAG_CURRENT" "$IMG_TAG_LATEST"
          docker push "$IMG_TAG_LATEST"
      fi

deploy-dev:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  image: alpine/k8s:1.25.6
  environment:
    name: edge.comentario.app
  script:
    # Use the Kubernetes context from GitLab agent
    - kubectl config use-context comentario/comentario-ci-tools:ys-comentario

    # Perform chart installation/upgrade (edge.comentario.app), waiting for it to complete (up to two minutes)
    - helm upgrade
        --namespace $NAMESPACE
        --install
        --set "clusterIssuer=letsencrypt-prod"
        --set "image.repository=$CI_REGISTRY_IMAGE"
        --set "image.tag=$VERSION"
        --set "comentario.emailFrom=noreply@yktoo.com"
        --set "comentario.secretName=comentario-edge-secrets"
        --set "ingress.host=edge.comentario.app"
        --wait
        --timeout 2m
        comentario-edge
        helm/comentario

deploy-tag:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  image: alpine/k8s:1.25.6
  environment:
    name: comment.yktoo.com
  script:
    # Use the Kubernetes context from GitLab agent
    - kubectl config use-context comentario/comentario-ci-tools:ys-comentario

    # Perform chart installation/upgrade (comment.yktoo.com), waiting for it to complete (up to two minutes)
    - helm upgrade
        --namespace $NAMESPACE
        --install
        --set "clusterIssuer=letsencrypt-prod"
        --set "image.repository=$CI_REGISTRY_IMAGE"
        --set "image.tag=$VERSION"
        --set "comentario.emailFrom=noreply@yktoo.com"
        --set "comentario.secretName=comentario-yktoo-com-secrets"
        --set "ingress.host=comment.yktoo.com"
        --wait
        --timeout 2m
        comentario-yktoo-com
        helm/comentario
