workflow:
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: "$CI_COMMIT_TAG"

    - if: $CI_COMMIT_BRANCH == "dev"
      variables:
        VERSION: "$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA"

stages:
  - build
  - package
  - deploy
  - release

variables:
  CI_TOOLS_VERSION: "v6"
  # Namespace to deploy Kubernetes objects into
  NAMESPACE: ys-comentario

build:
  stage: build
  image: registry.gitlab.com/comentario/comentario-ci-tools/builder:$CI_TOOLS_VERSION
  artifacts:
    when: always
    name: comentario
    expire_in: 1 days  # Only keep the last batch
    paths:
      - build/
      - cypress/screenshots
      - cypress/videos
      - tmp/logs
  variables:
    # We want to store downloaded packages under the project dir, so we can cache them
    GOPATH: $CI_PROJECT_DIR/.go
    # URL the test-site service is available at
    CYPRESS_TEST_SITE_URL: http://test-site
  services:
    - name: postgres:15-alpine
      variables:
        POSTGRES_DB: comentario
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
    # The test-site service. Its URL (mentioned in CYPRESS_TEST_SITE_URL) must match the host (alias)
    - name: registry.gitlab.com/comentario/comentario-ci-tools/test-site:$CI_TOOLS_VERSION
      alias: test-site
  cache:
    key:
      files:
        # Backend
        - go.mod
        # Frontend
        - yarn.lock
    paths:
      # Backend
      - .go/pkg/mod/
      # Frontend
      - .yarn-cache/
  before_script:
    # Create the required dirs
    - mkdir -p .go tmp/logs
  script:
    #-------------------------------------------------------------------------------------------------------------------
    # Build the app
    #-------------------------------------------------------------------------------------------------------------------
    # Generate code
    - go generate

    # Fetch the dependencies explicitly (not exactly necessary, but it's easier to spot problems if we do)
    - go mod download

    # Make sure there are no formatting issues
    - test -z "$(go fmt ./...)"

    # Run backend tests
    - go test -v ./...

    # Build the backend and the e2e plugin
    - go build -v -o "./build/comentario" -ldflags "-X main.version=$(git describe --tags) -X main.date=$(date --iso-8601=seconds)"
    - go build -buildmode=plugin -o "./build/comentario-e2e.so" "./e2e/plugin/"

    # Build the frontend
    - yarn install --frozen-lockfile --no-progress --cache-folder .yarn-cache
    - yarn run build:prod

    # Copy static assets
    - cp -r db/ templates/ build/

    # Start the backend
    - ./build/comentario -vv
        --e2e
        --port=8080
        --static-path=build
        --db-migration-path=build/db
        --template-path=build/templates
        --secrets=k8s/secrets.yaml &> ./tmp/logs/comentario-server.log &
    - sleep 2

    # Test the server is up and running
    - curl -vs http://localhost:8080/
    - curl -vs http://localhost:8080/login

    # Run the e2e tests
    - npx cypress install
    - npx cypress run

    # Rebuild the backend in the production mode. Disable CGO to statically link the executable so that we can run that
    # in Alpine
    - CGO_ENABLED=0 go build -a -v -o "./build/comentario" -ldflags "-w -s -X main.version=$(git describe --tags) -X main.date=$(date --iso-8601=seconds)"

package:
  stage: package
  image: docker
  services:
    - docker:dind
  dependencies:
    - build
  variables:
    IMG_TAG_CURRENT: $CI_REGISTRY_IMAGE:$VERSION
    IMG_TAG_LATEST:  $CI_REGISTRY_IMAGE:latest
  artifacts:
    paths:
      - dist/
  script:
    # Login to the Container Registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    # Remove the e2e plugin (it isn't supposed to be in the image)
    - rm build/comentario-e2e.so

    # Build and push the image
    - docker build -t "$IMG_TAG_CURRENT" .
    - docker push "$IMG_TAG_CURRENT"

    # For dev, also push it as 'latest'
    - |
      if [[ $CI_COMMIT_BRANCH == "dev" ]]; then
          docker tag "$IMG_TAG_CURRENT" "$IMG_TAG_LATEST"
          docker push "$IMG_TAG_LATEST"
      fi

    # Make a tarball with the binary and all related static files
    - tar_name="comentario_$VERSION_linux-amd64"
    - mkdir -p "dist/$tar_name"
    - cp -r build/* "dist/$tar_name/"
    - tar -czvf "dist/$tar_name.tar.gz" "dist/$tar_name"
    - rm -rf "dist/$tar_name"

deploy-dev:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  image: alpine/k8s:1.25.6
  environment:
    name: edge.comentario.app
  script:
    # Use the Kubernetes context from GitLab agent
    - kubectl config use-context comentario/comentario-ci-tools:ys-comentario

    # Perform chart installation/upgrade (edge.comentario.app), waiting for it to complete (up to two minutes)
    - helm upgrade
        --namespace $NAMESPACE
        --install
        --set "clusterIssuer=letsencrypt-prod"
        --set "image.repository=$CI_REGISTRY_IMAGE"
        --set "image.tag=$VERSION"
        --set "comentario.emailFrom=noreply@yktoo.com"
        --set "comentario.secretName=comentario-edge-secrets"
        --set "ingress.host=edge.comentario.app"
        --wait
        --timeout 2m
        comentario-edge
        helm/comentario

deploy-tag:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  image: alpine/k8s:1.25.6
  environment:
    name: comentario.app
  script:
    # Use the Kubernetes context from GitLab agent
    - kubectl config use-context comentario/comentario-ci-tools:ys-comentario

    # Perform chart installation/upgrade (comentario.app), waiting for it to complete (up to two minutes)
    - helm upgrade
        --namespace $NAMESPACE
        --install
        --set "clusterIssuer=letsencrypt-prod"
        --set "image.repository=$CI_REGISTRY_IMAGE"
        --set "image.tag=$VERSION"
        --set "comentario.emailFrom=noreply@yktoo.com"
        --set "comentario.secretName=comentario-app-secrets"
        --set "comentario.indexHtmlConfigMapName=comentario-app-statics-configmap"
        --set "ingress.host=comentario.app"
        --wait
        --timeout 2m
        comentario-app
        helm/comentario

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  dependencies:
    - package
  before_script:
    # Install curl
    - apk add --no-cache curl
  script:
    # Strip the 'v' prefix from the version number
    - ver_num="${VERSION#v}"
    - package_registry_url="$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/comentario/$ver_num"
    - tarball="comentario_$VERSION_linux-amd64.tar.gz"

    # Upload the tarball
    - echo "Uploading artifacts for version '$ver_num'"
    - >
      curl
        --header "JOB-TOKEN: $CI_JOB_TOKEN"
        --upload-file "dist/$tarball"
        "$package_registry_url/$tarball"

    # Create a release
    - echo "Creating release $CI_COMMIT_TAG"
    - >
      release-cli create 
        --name $CI_COMMIT_TAG 
        --tag-name $CI_COMMIT_TAG
        --description ./CHANGELOG.md
        --assets-link "{\"name\":\"$tarball\",\"url\":\"$package_registry_url/$tarball\"}"
