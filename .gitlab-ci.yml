workflow:
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: "$CI_COMMIT_TAG"

    - if: $CI_COMMIT_BRANCH == "dev"
      variables:
        VERSION: "$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA"

stages:
  - build
  - package

variables:
  CI_TOOLS_VERSION: "v1"
  POSTGRES_VERSION: "11"

build:
  stage: build
  image: registry.gitlab.com/comentario/comentario-ci-tools/builder:$CI_TOOLS_VERSION
  services:
    - postgres:$POSTGRES_VERSION
  artifacts:
    when: always
    name: comentario
    expire_in: 1 days  # Only keep the last batch
    paths:
      - build/
  variables:
    # We want to store downloaded packages under the project dir, so we can cache them
    GOPATH: $CI_PROJECT_DIR/.go
    # Required for the DB service (Postgres) to run
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_DB: comentario_test
    # Required for the app to run
    COMMENTO_POSTGRES: postgres://postgres:postgres@postgres/comentario_test?sslmode=disable
  cache:
    key:
      files:
        # Backend
        - go.mod
    paths:
      # Backend
      - .go/pkg/mod/
  before_script:
    # Create the required dirs
    - mkdir -p .go
    # Install Yarn
    - npm install -g yarn@1.22.19
  script:
    #-------------------------------------------------------------------------------------------------------------------
    # Build the app
    #-------------------------------------------------------------------------------------------------------------------
    # Fetch the dependencies explicitly (not exactly necessary, but it's easier to spot problems if we do)
    - go mod download
    # Make sure there are no formatting issues
    - test -z "$(go fmt ./api/)"
    # Build the app
    - make prod
    # Run tests
    - make test

package:
  stage: package
  image: docker
  services:
    - docker:dind
  dependencies:
    - build
  script:
    # Login to the Container Registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    # Determine image version
    - IMG_TAG="$CI_REGISTRY_IMAGE:$VERSION"

    # Build and push the image
    - docker build -t $IMG_TAG .
    - docker push $IMG_TAG
