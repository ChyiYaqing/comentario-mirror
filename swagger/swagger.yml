info:
  title: Comentario
  version: 1.0.0
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
swagger: "2.0"
basePath: /api

securityDefinitions:
  # Cookie authentication for commenters
  commenterTokenHeader:
    type: apiKey
    in: header
    name: X-Commenter-Token

  # Cookie authentication for owners. Uses the apiKey type for the lack of a proper cookie-based authentication in
  # Swagger 2
  ownerCookie:
    type: apiKey
    in: header
    name: Cookie

definitions:

  comment:
    type: object
    properties:
      commentHex:
        $ref: "#/definitions/hexId"
      commenterHex:
        $ref: "#/definitions/hexId"
      parentHex:
        $ref: "#/definitions/parentHexId"
      domain:
        type: string
      creationDate:
        type: string
        format: date-time
      state:
        $ref: "#/definitions/commentState"
      deleted:
        type: boolean
        x-omitempty: false
      direction:
        type: integer
        x-omitempty: false
      score:
        type: integer
        x-omitempty: false
      markdown:
        type: string
      html:
        type: string
      path:
        type: string

  commenter:
    type: object
    properties:
      commenterHex:
        $ref: "#/definitions/hexId"
      email:
        type: string
        format: email
      name:
        type: string
      websiteUrl:
        type: string
        format: uri
      avatarUrl:
        type: string
        format: uri
      provider:
        type: string
      joinDate:
        type: string
        format: date-time
      isModerator:
        type: boolean
        x-omitempty: false

  commentState:
    description: Comment state
    type: string
    enum:
      - approved
      - unapproved
      - flagged

  domain:
    description: Registered domain
    type: object
    properties:
      domain:
        type: string
      ownerHex:
        $ref: "#/definitions/hexId"
      name:
        type: string
      creationDate:
        type: string
        format: date-time
      state:
        $ref: "#/definitions/domainState"
      importedComments:
        type: boolean
        x-omitempty: false
      autoSpamFilter:
        type: boolean
        x-omitempty: false
      requireModeration:
        type: boolean
        x-omitempty: false
      requireIdentification:
        type: boolean
        x-omitempty: false
      moderateAllAnonymous:
        type: boolean
        x-omitempty: false
      moderators:
        type: array
        items:
          $ref: "#/definitions/domainModerator"
      emailNotificationPolicy:
        $ref: "#/definitions/emailNotificationPolicy"
      idps:
        $ref: "#/definitions/idpMap"
      ssoSecret:
        type: string
      ssoUrl:
        type: string
        format: uri
      defaultSortPolicy:
        $ref: "#/definitions/sortPolicy"

  domainModerator:
    description: Domain moderator
    type: object
    properties:
      email:
        type: string
        format: email
      domain:
        type: string
      addDate:
        type: string
        format: date-time

  domainState:
    description: Domain state
    type: string
    enum:
      - unfrozen
      - frozen

  email:
    type: object
    properties:
      email:
        type: string
        format: email
      unsubscribeSecretHex:
        $ref: "#/definitions/hexId"
      lastEmailNotificationDate:
        type: string
        format: date-time
      sendReplyNotifications:
        type: boolean
        x-omitempty: false
      sendModeratorNotifications:
        type: boolean
        x-omitempty: false

  entity:
    description: Entity for resetting the password
    type: string
    enum:
      - owner
      - commenter

  emailNotificationPolicy:
    description: Email notification policy
    type: string
    enum:
      - all
      - none
      - pending-moderation

  hexId:
    description: ID consisting of 64 hex digits
    type: string
    minLength: 64
    maxLength: 64
    pattern: '[0-9a-f]{64}'

  idpMap:
    description: Map of enabled identity providers (name => boolean), including 'commento', 'sso', and all known federated IdPs
    type: object
    x-go-type:
      import:
        package: "gitlab.com/comentario/comentario/internal/api/exmodels"
      type: "IdentityProviderMap"
    x-omitempty: false

  owner:
    description: Instance owner
    type: object
    properties:
      ownerHex:
        $ref: "#/definitions/hexId"
      email:
        type: string
        format: email
      name:
        type: string
      confirmedEmail:
        type: boolean
      joinDate:
        type: string
        format: date-time

  page:
    description: Page hosting comments
    type: object
    properties:
      domain:
        type: string
      path:
        type: string
      isLocked:
        type: boolean
        x-omitempty: false
      commentCount:
        type: integer
        x-omitempty: false
      stickyCommentHex:
        $ref: "#/definitions/hexId"
      title:
        type: string

  parentHexId:
    description: ID similar to HexID, consisting of 64 hex digits, which can also be 'root'
    type: string
    maxLength: 64
    pattern: 'root|[0-9a-f]{64}'

  sortPolicy:
    description: Sort policy
    type: string
    enum:
      - score-desc
      - creationdate-desc
      - creationdate-asc

parameters:

  federatedIdpId:
    in: path
    name: provider
    required: true
    description: Federated identity provider ID
    type: string
    enum:
      - github
      - gitlab
      - google
      - twitter

responses:

  # 307
  OAuthRedirect:
    description: Redirecting to a federated identity provider
    headers:
      Location:
        type: string

  # 401
  OAuthFailure:
    description: Authentication failed
    schema:
      type: string

paths:
  /_:
    options:
      operationId: Generic
      summary: Fake endpoint to provide generic errors
      responses:
        400:
          description: Bad request
          schema:
            type: object
            properties:
              details:
                type: string
        401:
          description: Unauthorized
          schema:
            type: object
            properties:
              details:
                type: string
        403:
          description: Forbidden
          schema:
            type: object
            properties:
              details:
                type: string
        404:
          description: Resource not found
          schema:
            type: object
            properties:
              details:
                type: string
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              details:
                type: string

  #---------------------------------------------------------------------------------------------------------------------
  # Auth
  #---------------------------------------------------------------------------------------------------------------------

  /forgot:
    post:
      operationId: ForgotPassword
      summary: Request owner or commenter password reset for specified email
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - entity
            properties:
              email:
                type: string
                format: email
              entity:
                $ref: "#/definitions/entity"
      responses:
        204:
          description: Reset email has been sent, if the email is known

  /reset:
    post:
      operationId: ResetPassword
      summary: Reset owner's or commenter's password
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - resetHex
              - password
            properties:
              resetHex:
                $ref: "#/definitions/hexId"
              password:
                type: string
                minLength: 1
                maxLength: 63
      responses:
        200:
          description: Password has been reset
          schema:
            type: object
            properties:
              entity:
                $ref: "#/definitions/entity"

  #---------------------------------------------------------------------------------------------------------------------
  # Comments
  #---------------------------------------------------------------------------------------------------------------------

  /comment/approve:
    post:
      operationId: CommentApprove
      summary: Approve specified unapproved comment
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - commentHex
            properties:
              commentHex:
                $ref: "#/definitions/hexId"
      responses:
        204:
          description: Comment has been approved

  /comment/count:
    post:
      operationId: CommentCount
      summary: Request comment counts for specified paths on given domain
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - domain
              - paths
            properties:
              domain:
                type: string
              paths:
                type: array
                items:
                  type: string
                minItems: 1
                maxItems: 32
      responses:
        200:
          description: Comment counts per path
          schema:
            type: object
            properties:
              commentCounts:
                type: object # map[string]int

  /comment/delete:
    post:
      operationId: CommentDelete
      summary: Delete specified comment
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - commentHex
            properties:
              commentHex:
                $ref: "#/definitions/hexId"
      responses:
        204:
          description: Comment has been deleted

  /comment/edit:
    post:
      operationId: CommentEdit
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - commentHex
              - markdown
            properties:
              commentHex:
                $ref: "#/definitions/hexId"
              markdown:
                type: string
      responses:
        200:
          description: Comment is updated, returning the resulting HTML
          schema:
            type: object
            properties:
              html:
                type: string

  /comment/list:
    post:
      operationId: CommentList
      summary: Get a list of comments and commenters for the given domain/path combination
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - domain
            properties:
              domain:
                type: string
                minLength: 1
              path:
                type: string
      responses:
        200:
          description: Comment and commenter list
          schema:
            type: object
            properties:
              domain:
                type: string
              comments:
                type: array
                items:
                  $ref: "#/definitions/comment"
              commenters:
                type: object # map[string]commenter
              requireModeration:
                type: boolean
                x-omitempty: false
              requireIdentification:
                type: boolean
                x-omitempty: false
              isFrozen:
                type: boolean
                x-omitempty: false
              isModerator:
                type: boolean
                x-omitempty: false
              defaultSortPolicy:
                $ref: "#/definitions/sortPolicy"
              attributes:
                $ref: "#/definitions/page"
              configuredOauths:
                $ref: "#/definitions/idpMap"

  /comment/new:
    post:
      operationId: CommentNew
      summary: Add a new comment
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - domain
              - parentHex
              - markdown
            properties:
              domain:
                type: string
              path:
                type: string
              parentHex:
                $ref: "#/definitions/parentHexId"
              markdown:
                type: string
      responses:
        200:
          description: Comment is added
          schema:
            type: object
            properties:
              commentHex:
                $ref: "#/definitions/hexId"
              commenterHex:
                $ref: "#/definitions/hexId"
              html:
                type: string
              state:
                $ref: "#/definitions/commentState"

  /comment/vote:
    post:
      operationId: CommentVote
      summary: Vote for specified comment
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - commentHex
              - direction
            properties:
              commentHex:
                $ref: "#/definitions/hexId"
              direction:
                type: integer
                enum:
                  - -1
                  - 0
                  - 1
      responses:
        204:
          description: Vote has been applied

  #---------------------------------------------------------------------------------------------------------------------
  # Commenters
  #---------------------------------------------------------------------------------------------------------------------

  /commenter/login:
    post:
      operationId: CommenterLogin
      summary: Sign in as specified commenter
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 1
      responses:
        200:
          description: Logged in successfully
          schema:
            type: object
            properties:
              commenterToken:
                $ref: "#/definitions/hexId"
              commenter:
                $ref: "#/definitions/commenter"
              email:
                $ref: "#/definitions/email"

  /commenter/logout:
    post:
      operationId: CommenterLogout
      summary: Log the currently signed-in commenter out
      security:
        - commenterTokenHeader: []
      responses:
        204:
          description: Logged out successfully

  /commenter/new:
    post:
      operationId: CommenterNew
      summary: Sign up as a new commenter
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - name
              - password
            properties:
              email:
                type: string
                format: email
              name:
                type: string
                minLength: 1
                maxLength: 63
              password:
                type: string
                minLength: 1
                maxLength: 63
              websiteUrl:
                type: string
                format: uri
      responses:
        204:
          description: Commenter signed up successfully

  /commenter/photo:
    get:
      operationId: CommenterPhoto
      summary: Get an avatar for given commenter in JPEG format
      produces:
        - image/jpeg
      parameters:
        - name: commenterHex
          in: query
          type: string
          required: true
          minLength: 64
          maxLength: 64
          pattern: '[0-9a-f]{64}'
      responses:
        200:
          description: Success or failure response (see 'success' property)
          schema:
            type: file

  /commenter/self:
    post:
      operationId: CommenterSelf
      summary: Request commenter's sign-in status and, if the commenter's signed in, their details
      responses:
        204:
          description: Commenter is not signed in
        200:
          description: Commenter is signed in
          schema:
            type: object
            properties:
              commenter:
                $ref: "#/definitions/commenter"
              email:
                $ref: "#/definitions/email"

  /commenter/token/new:
    post:
      operationId: CommenterTokenNew
      summary: Request a new anonymous, unique commenter token
      responses:
        200:
          description: Commenter token
          schema:
            type: object
            properties:
              commenterToken:
                $ref: "#/definitions/hexId"

  /commenter/update:
    post:
      operationId: CommenterUpdate
      summary: Update commenter details
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - name
            properties:
              email:
                type: string
                format: email
              name:
                type: string
                minLength: 1
                maxLength: 63
              websiteUrl:
                type: string
                format: uri
              avatarUrl:
                type: string
                format: uri
      responses:
        204:
          description: Commenter details haven been updated

  #---------------------------------------------------------------------------------------------------------------------
  # Domains
  #---------------------------------------------------------------------------------------------------------------------

  /domain/clear:
    post:
      operationId: DomainClear
      summary: Clear all domain's pages/comments/votes
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
              - domain
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
              domain:
                type: string
                minLength: 1
                maxLength: 253
      responses:
        204:
          description: Domain has been cleared

  /domain/delete:
    post:
      operationId: DomainDelete
      summary: Delete specified domain
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
              - domain
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
              domain:
                type: string
                minLength: 1
                maxLength: 253
      responses:
        204:
          description: Domain has been deleted

  /domain/export/begin:
    post:
      operationId: DomainExportBegin
      summary: Initiate domain data export
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
              - domain
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
              domain:
                type: string
                minLength: 1
                maxLength: 253
      responses:
        204:
          description: Export has been successfully started

  /domain/export/download:
    get:
      operationId: DomainExportDownload
      summary: Download previously exported domain data
      produces:
        - application/gzip
      parameters:
        - in: query
          name: exportHex
          type: string
          required: true
          minLength: 64
          maxLength: 64
      responses:
        200:
          description: Export file
          schema:
            type: file
          headers:
            Content-Disposition:
              type: string

  /domain/import/commento:
    post:
      operationId: DomainImportCommento
      summary: Import comments and commenters into specified domain from a Commento export, downloaded from certain URL
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
              - domain
              - url
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
              domain:
                type: string
                minLength: 1
                maxLength: 253
              url:
                type: string
                format: uri
      responses:
        200:
          description: Import completed successfully
          schema:
            type: object
            properties:
              numImported:
                type: integer
                description: Number of imported comments
                x-omitempty: false

  /domain/import/disqus:
    post:
      operationId: DomainImportDisqus
      summary: Import comments and commenters into specified domain from a Disqus export, downloaded from certain URL
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
              - domain
              - url
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
              domain:
                type: string
                minLength: 1
                maxLength: 253
              url:
                type: string
                format: uri
      responses:
        200:
          description: Import completed successfully
          schema:
            type: object
            properties:
              numImported:
                type: integer
                description: Number of imported comments
                x-omitempty: false

  /domain/list:
    post:
      operationId: DomainList
      summary: Get a list of registered domains
      security:
        - ownerCookie: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
      responses:
        200:
          description: List of domains and configured identity providers
          schema:
            type: object
            properties:
              domains:
                type: array
                items:
                  $ref: "#/definitions/domain"
              configuredOauths:
                $ref: "#/definitions/idpMap"

  /domain/moderator/delete:
    post:
      operationId: DomainModeratorDelete
      summary: Delete specified domain moderator
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
              - domain
              - email
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
              domain:
                type: string
                minLength: 1
                maxLength: 253
              email:
                type: string
                format: email
      responses:
        204:
          description: Domain moderator has been deleted

  /domain/moderator/new:
    post:
      operationId: DomainModeratorNew
      summary: Add a new domain moderator
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
              - domain
              - email
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
              domain:
                type: string
                minLength: 1
                maxLength: 253
              email:
                type: string
                format: email
      responses:
        204:
          description: Domain moderator has been added

  /domain/new:
    post:
      operationId: DomainNew
      summary: Register a new domain
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
              - name
              - domain
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
              name:
                description: Display name of the domain
                type: string
                minLength: 1
                maxLength: 63
              domain:
                type: string
                minLength: 1
                maxLength: 253 # Maximum length of a valid DNS entry
      responses:
        200:
          description: Domain added successfully
          schema:
            type: object
            properties:
              domain:
                type: string

  /domain/sso/new:
    post:
      operationId: DomainSsoSecretNew
      summary: Generate an SSO secret for specified domain
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
              - domain
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
              domain:
                type: string
                minLength: 1
                maxLength: 253
      responses:
        200:
          description: SSO secret has been generated for the domain
          schema:
            type: object
            properties:
              ssoSecret:
                $ref: "#/definitions/hexId"

  /domain/statistics:
    post:
      operationId: DomainStatistics
      summary: Get comment and view statistics for specified domain
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
              - domain
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
              domain:
                type: string
                minLength: 1
                maxLength: 253
      responses:
        200:
          description: Success or failure response (see 'success' property)
          schema:
            type: object
            properties:
              viewsLast30Days:
                type: array
                items:
                  type: integer
              commentsLast30Days:
                type: array
                items:
                  type: integer

  /domain/update:
    post:
      operationId: DomainUpdate
      summary: Update properties of specified domain
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
              - domain
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
              domain:
                $ref: "#/definitions/domain"
      responses:
        204:
          description: Domain properties have been updated

  #---------------------------------------------------------------------------------------------------------------------
  # Emails
  #---------------------------------------------------------------------------------------------------------------------

  /email/get:
    post:
      operationId: EmailGet
      summary: Get email properties for specified unsubscribe token
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - unsubscribeSecretHex
            properties:
              unsubscribeSecretHex:
                $ref: "#/definitions/hexId"
      responses:
        200:
          description: Email object
          schema:
            type: object
            properties:
              email:
                $ref: "#/definitions/email"

  /email/moderate:
    get:
      operationId: EmailModerate
      summary: Apply a moderator action to specified comment
      parameters:
        - name: unsubscribeSecretHex
          in: query
          type: string
          required: true
          minLength: 64
          maxLength: 64
        - name: action
          in: query
          type: string
          required: true
          enum:
            - approve
            - delete
        - name: commentHex
          in: query
          type: string
          required: true
          minLength: 64
          maxLength: 64
      responses:
        204:
          description: Action has been applied

  /email/update:
    post:
      operationId: EmailUpdate
      summary: Update properties of specified email
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                $ref: "#/definitions/email"
      responses:
        204:
          description: Email properties have been updated

  #---------------------------------------------------------------------------------------------------------------------
  # Owners
  #---------------------------------------------------------------------------------------------------------------------

  /owner/confirm-hex:
    get:
      operationId: OwnerConfirmHex
      summary: Confirm specified owner's email using the emailed token
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: confirmHex
          required: true
          type: string
          minLength: 64
          maxLength: 64
      responses:
        307:
          description: Redirect to login
          headers:
            Location:
              type: string

  /owner/new:
    post:
      operationId: OwnerNew
      summary: Sign up as a new owner
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
              - email
              - password
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 63
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 1
                maxLength: 63
      responses:
        200:
          description: Owner has signed up successfully
          schema:
            type: object
            properties:
              confirmEmail:
                type: boolean
                description: Whether a confirmation email was sent
                x-omitempty: false

  /owner/login:
    post:
      operationId: OwnerLogin
      summary: Sign in as an existing owner
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 1
                maxLength: 63
      responses:
        200:
          description: Owner has signed in successfully
          schema:
            type: object
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"

  /owner/self:
    post:
      operationId: OwnerSelf
      summary: Request owner's sign-in status and, if the owner's signed in, their details
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
      responses:
        204:
          description: Owner is not signed in
        200:
          description: Owner is signed in
          schema:
            type: object
            properties:
              owner:
                $ref: "#/definitions/owner"

  /owner/delete:
    post:
      operationId: OwnerDelete
      summary: Delete current owner's account
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - ownerToken
            properties:
              ownerToken:
                $ref: "#/definitions/hexId"
      responses:
        204:
          description: Owner's account has been deleted

  #---------------------------------------------------------------------------------------------------------------------
  # Pages
  #---------------------------------------------------------------------------------------------------------------------

  /page/update:
    post:
      operationId: PageUpdate
      summary: Update specified page's properties
      security:
        - commenterTokenHeader: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - domain
              - attributes
            properties:
              domain:
                type: string
                minLength: 1
                maxLength: 253
              path:
                type: string
                minLength: 1
                maxLength: 2083
              attributes:
                $ref: "#/definitions/page"
      responses:
        204:
          description: Page properties have been updated

  #---------------------------------------------------------------------------------------------------------------------
  # OAuth
  #---------------------------------------------------------------------------------------------------------------------

  /oauth/{provider}:
    get:
      operationId: OauthInit
      summary: Initiate signing in using federated authentication
      produces:
        - text/html # For an error response only, otherwise a redirect is issued
      parameters:
        - $ref: "#/parameters/federatedIdpId"
        - in: query
          name: commenterToken
          type: string
          required: true
          minLength: 64
          maxLength: 64
          pattern: '[0-9a-f]{64}'
      responses:
        307:
          $ref: "#/responses/OAuthRedirect"
        401:
          $ref: "#/responses/OAuthFailure"

  /oauth/{provider}/callback:
    get:
      operationId: OauthCallback
      summary: Endpoint that gets called back by the federated authentication provider
      produces:
        - text/html
      parameters:
        - $ref: "#/parameters/federatedIdpId"
      responses:
        200:
          description: User has successfully signed in
        401:
          $ref: "#/responses/OAuthFailure"

  /oauth/sso:
    get:
      operationId: OauthSsoInit
      summary: Initiate signing in using federated SSO authentication
      produces:
        - text/html # For an error response only, otherwise a redirect is issued
      parameters:
        - in: query
          name: commenterToken
          type: string
          required: true
          minLength: 64
          maxLength: 64
          pattern: '[0-9a-f]{64}'
      responses:
        307:
          $ref: "#/responses/OAuthRedirect"
        401:
          $ref: "#/responses/OAuthFailure"

  /oauth/sso/callback:
    get:
      operationId: OauthSsoCallback
      summary: Endpoint that gets called back by the SSO authentication provider
      produces:
        - text/html
      parameters:
        - in: query
          name: payload
          type: string
          required: true
          minLength: 1
        - in: query
          name: hmac
          type: string
          required: true
          minLength: 1
      responses:
        200:
          description: User has successfully signed in
        401:
          $ref: "#/responses/OAuthFailure"

  #---------------------------------------------------------------------------------------------------------------------
  # Testing endpoints
  # These endpoints are only available during the test cycle and never in production
  #---------------------------------------------------------------------------------------------------------------------

  /e2e/reset:
    post:
      operationId: E2eReset
      summary: Reset the backend (all settings and database) to testing defaults
      responses:
        204:
          description: The backend has been successfully reset
